c
q
response.code == "200"
n
response.code == "200"
response
c
@client.perform
n
q
"#{ES_HOST}/complains/_doc/#{complain_id}"
#{ES_HOST}/complains/_doc/#{complain_id}
q
"#{BASE_URL}/#{@complain_ids[1]}"
c
"#{BASE_URL}/#{@complain_ids[1]}"
q
delete(url)
delete url
q
get "#{BASE_URL}/#{@complain_ids[1]}"
get "#{BASE_URL}/_doc/#{@complain_ids[1]}"
"#{BASE_URL}/_doc/#{@complain_ids[1]}"
delete "#{BASE_URL}/_doc/#{@complain_ids[1]}"
"#{BASE_URL}/_doc/#{@complain_ids[1]}"
@complain_ids[1]
delete "#{BASE_URL}/_doc/#{@complain_ids[1]}"
p @complain_ids
c
,c
c
expect(parsed["results"][0]).to match(new_complain_ok.stringify_keys)
parsed["results"][0]
(parsed["results"][0]
new_complain_ok.stringify_keys
c
pp new_complain_ok
pp parsed["results"][0]
c
expect(parsed["results"][0]).to match(new_complain_ok)
new_complain_ok
parsed["results"][0]
c
expect(parsed["results"]).to match(new_complain_ok)
parsed = JSON.parse(last_response.body)
get "#{BASE_URL}"
c
q
pp parsed
parsed = JSON.parse(last_response.body)
get "#{BASE_URL}"
c
q
@created_complain_id = JSON.parse(last_response.body)
last_response.status
post(BASE_URL, new_complain_ok.to_json, { 'CONTENT_TYPE' => 'application/json' })
3post(BASE_URL, new_complain_ok.to_json, { 'CONTENT_TYPE' => 'application/json' })
q
new_complain_ok
post "#{BASE_URL}", new_complain_ok
q
new_complain_ok.to_json
post "#{BASE_URL}", new_complain_ok.to_json
new_complain_ok.to_json
q
c
q
c
unpaginated["results"].length
q
unpaginated
unpaginated.class
pp unpaginated
unpaginated.length
unpaginated = JSON.parse(last_response.body)
get "#{BASE_URL}"
unpaginated.length
c
pp unpaginated["results"][1]
unpaginated["results"][1]
pp paginated["results"][0]
n
unpaginated
q
get "#{BASE_URL}"
last_response.body
unpaginated
q
unpaginated
unpaginated["results"][1]
ununpaginated["results"][1]
unpaginated[1]
pp paginated["results"][0]
n
hn
q
paginated
n
pp unpaginated = JSON.parse(last_response.body)
unpaginated = JSON.parse(last_response.body)
JSON.parse(last_response.body)
last_response.body
unpaginated
get "#{BASE_URL}"
q
#{BASE_URL}
pp unpaginated
q
n
c
n
q
c
last_response.status
c
Utils::create_index('complains', Mappings::COMPLAINS)
Utils::index_exists?('complains')
c
Utils::index_exists?('complains')
unless Utils::index_exists?('complains')
Utils::create_index('complains', Mappings::COMPLAINS)
q
mapping
response = @client.perform
n
"#{ES_HOST}/#{index_name}"
c
q
"#{ES_HOST}/#{index}"
#{ES_HOST}/#{index}
c
Utils::create_index('complains', Mappings::COMPLAINS)
q
Utils::create_index('complains', Mappings::COMPLAINS)
Mappings::COMPLAINS
q
 Utils::create_index('complains')
Utils::index_exists?('complains')
q
response.read_body
q
get "/complains"
get "/complains/"
get "/"
get "/complains"
get "/complains'
get "#{BASE_URL}"
BASE_URL
c
q
idx
JSON.parse(Services::create_complaint(*argz).read_body)["_id"]
idx
n
 JSON.parse(Services::create_complaint(*argz).read_body)["_id"]
argz
c
q
JSON.parse(Services::create_complaint(*argz).read_body)["_id"]
@complain_ids
idx
n
 JSON.parse(Services::create_complaint(*argz).read_body)["_id"]
@complain_ids
c
q
c
q
c
n
JSON.parse(Services::create_complaint(*argz).read_body)["_id"]
@complain_ids
c
q
new_complains
c
compc
n
c
@complain_ids << JSON.parse(Services::create_complaint(*argz).read_body)["_id"]
JSON.parse(Services::create_complaint(*argz).read_body)["_id"]
argz
c
response.code == '404'
c
@new_complain_id = JSON.parse(Services::create_complaint(*argz).read_body)["_id"]
c
q
c
argz
q
c
new_complain
argz
c
expect(last_response.status).to eq(200)
c
(get "/complain/E1TgrXkBE_YqwJxyhNMd").status
(get '/complain/E1TgrXkBE_YqwJxyhNMd").status
(get "/complains/_doc/E1TgrXkBE_YqwJxyhNMd").status
(get "complains/_doc/E1TgrXkBE_YqwJxyhNMd").status
pp JSON.parse((get "/complains").body)
JSON.parse((get "/complains").body)
(get "/complains").body
(get "/complains/_search", {}).body
(get "/complains/_search", {})
JSON.parse(last_response.body)
(get "/complains/_search")
JSON.parse(last_response.body)
(get "/complains/_search").body
(get "/complains/_search).body
(get "/complains/_doc/E1TgrXkBE_YqwJxyhNMd").status
(get "/complains").status
get "/complains".status
get "/complains"
get '/'
get "/'
get "complains/_doc/NFT0rXkBE_YqwJxyutPJ"
get "/complains/_doc/NFT0rXkBE_YqwJxyutPJ"
"#{BASE_URL}/#{@new_complain_id}"
get "#{BASE_URL}/#{@new_complain_id}"
"#{BASE_URL}/#{@new_complain_id}"
last_response.status
c
"#{BASE_URL}/#{@new_complain_id}"
last_response.status
c
last_response.status
get "/complains/#{@new_complain_id}"
c
n
@new_complain_id
c
expect(last_response.status).to eq(200)
expect(5).to(equal(1))
expect((last_response.status).to eq(200))
expect(last_response.status).to eq(200)
last_response.status
c
@new_complain_id = JSON.parse(Services::create_complaint(*argz).read_body)["_id"]
pp JSON.parse(Services::create_complaint(*argz).read_body)
@new_complain_id = Services::create_complaint(*argz).read_body
Services::create_complaint(*argz).parse_body
n
c
@new_complain_id = Services::create_complaint(new_complain).parse_body
@new_complain_id = Servces::create_complaint(new_complain).parse_body
c
http.request(request)
c
Sinatra::Base.test?
Sinatra::Base.production?
Sinatra::Base.development?
c
response
c
