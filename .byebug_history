c
response
c
response
n
c
self.create_complaint(description, title, location)
response.code
n
c
n
c
n
c
n
c
response.code
n
@client.perform
n
pp body
body
n
response
c
response
c
pp body.merge(pagination_config(*argz))
p body.merge(pagination_config(*argz))
pagination_config(*argz)
n
c
n
pagination_search_args
pagination_search_args.empty
c
n
c
n
c
n
pagination_search_args.empty?
!pagination_search_args.empty?
pagination_search_args
c
sort_search_args
pagination_args
c
@client.perform
n
"#{ES_HOST}/complains/_doc/#{complain_id}"
c
 @client.perform
n
url
n
#{ES_HOST}/complains/_doc/#{complain_id}
c
search
re
c
Services::list_all_complaints(*args)
c
puts obj.to_json
@client.perform
obj
c
response.read_body
n
c
n
@client.perform
c
bom
n
@client.perform
n
c
@client.perform
n
obj
n
obj
n
cn
c
obj
boj
n
c
n
sort_field
c
sort_order
sort_field
obj
n
c
@client.perform
n
c
obj
 @client.perform
n
c
response
n
obj
@client.perform
n
c
n
sort_field && sort_order
n
pagination_config(offset, per_page)
n
c
n
c
e
n
offset || per_page
c
n
c
e
n
c
n
per_page
n
c
n
c
n
c
n
 response = @client.perform
n
url
n
puts obj.to_json
obj.to_json
obj_to_json
obj
puts obj.to_json
obj
n
obj
n
q
obj
ojb
n
c
n
c
n
c
e
n
search = a["hits"]
a = JSON.parse(result)
n
c
n
 response = @client.perform
n
c
n
c
n
c
Utils::format_elastic_response(response.read_body)
response.read_body
response.code
response
response = Services::get_one_complaint(params["id"])
Services::get_one_complaint(params["id"])
c
response = Services::get_one_complaint(params["id"])
n
c
n
result
n
@request.content_type == 'application/json'
c
args
c
{ from: offset, size: per_page, sort: [ { "#{sort_field}" => { order: sort_order } } ], query: { match_all: {} } }
sort_order
sort_field
per_page
offset
a = { from: offset, size: per_page, sort: [ { "#{sort_field}" => { order: sort_order } } ], query: { match_all: {} } }{ from: offset, size: per_page, sort: [ { "#{sort_field}" => { order: sort_order } } ], query: { match_all: {} } }
{ from: offset, size: per_page, sort: [ { "#{sort_field}" => { order: sort_order } } ], query: { match_all: {} } }
puts { from: offset, size: per_page, sort: [ { "#{sort_field}" => { order: sort_order } } ], query: { match_all: {} } }.to_json
{ from: offset, size: per_page, sort: [ { "#{sort_field}" => { order: sort_order } } ], query: { match_all: {} } }
p { from: offset, size: per_page, sort: [ { "#{sort_field}" => { order: sort_order } } ], query: { match_all: {} } }.to_json
{ from: offset, size: per_page, sort: [ { "#{sort_field}" => { order: sort_order } } ], query: { match_all: {} } }.to
c
Services::list_all_complaints(*args)
c
args
c
d
n
sort_field
{ "#{sort_field}" => { order: sort_order } }
p { from: offset, size: per_page, sort: [ { 'sort_field' => { order: "sort_order" } } ], query: { match_all: {} } }
p { from: offset, size: per_page, sort: [ { "#{"sort_field"}" => { order: "sort_order" } } ], query: { match_all: {} } }
p { from: offset, size: per_page, sort: [ { "#{sort_field}" => { order: sort_order } } ], query: { match_all: {} } }
n
params["offset"]
c
@request.body.size
@request
request.body.size
request.body
request.content_type
c
result["_source"]
pp result
re
c
cc
c
Utils::format_elastic_response(response.read_body)
response.read_body
c
result.read_body
response.read_body
result
c
pp result
c
pp body
c
pp body
c
pp body
c
n
c
pp body
c
n
base
n
p v
p k
v
k
c
k
