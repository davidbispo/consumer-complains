c
pp body
c
pp body
c
pp body
c
n
c
pp body
c
n
base
n
p v
p k
v
k
c
k
n
geodistance_args.empty?
c
geodistance_args.blank?
geo_distance_config(*geodistance_args)
n
c
text_search_args
n
c
p text_search_args
n
Hash[search_hash.select { |k,v| ["lat", "lon", "distance"].include?(k) }.sort]
n
p
c
@url
c
 response.code
c
response = @client.perform
n
c
params['id']
params
c
response.code == "200"
c
response.code
c
response
c
JSON.parse(response.read_body)
response.read_body
c
response.code == "200" 
p if response.code == "200"
c
response = @client.perform
n
c
response = @client.perform
n
body
c
n
c
body
n
c
location
title
description
c
n
c
response
n
c
params
c
response
c
response.code
n
response
n
response = http.request(request)
request.body
c
p params["offset"]
params
params["offset"],
c
Services::search_complaint(@body)
c
response
n
search_body(search_hash)
n
c
n
c
n
ElasticClient
c
q
c
require_relative './elastic_client'
ElasticClient
c
ElasticClient
c
n
c
search_hash
n
c
Services::search_complaint
Services
Services::search_complaint(@body) 
p Services::search_complaint
c
p
c
p
c
@body
n
@request_payload
p
n
p
c
      )c
        @request_payload["location"]
        @request_payload["title"],
        @request_payload["description"],
create_body(
JSON.parse(request.body)
request.body
response
c
response
n
c
{doc:@request_payload}
@request_payload
{ doc : @request_payload }
{ :doc : { @request_payload }}
{ :doc : { @request_payload }},
{ doc : { @request_payload }}
p { doc: { @request_payload }}
c
p update_body(@request_payload)
c
n
c
@request_payload
p update_body(@request_payload) @request_payload
p update_body(@request_payload)
c
p @request_payload
c
p @request_payload
c
p **@request_payload
p update_body(**@request_payload)
c
@request_payload
c
@request_payload
c
@request_payload
request_payload
JSON.parse(create_or_update_body(**@request_payload).to_json)
create_or_update_body(**@request_payload).to_json
puts create_or_update_body(**@request_payload).to_json
pp create_or_update_body(**@request_payload).to_json
pp (**@request_payload).to_json
response
c
n
p @request_payload
c
response
p
response.code
c
pp create_or_update_body(**params)
p create_or_update_body(**params)
n
c
p @request_payload.keys.sort != required
p valid_required
n
@request_payload.keys.sort == required
p required
p @request_payload.keys.sort
c
p
params
c
@request_payload
request_payload
c
@request_payload = JSON.parse(@request.body.read)
@request_payload = JSON.parse(request.body.read)
@request.body.rewind
@request.body
@request
self
self.class.name
self.name
self
c
