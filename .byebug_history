c
q
c
q
c
n
@client.perform
n
"#{ES_HOST}/#{index_name}"
#{ES_HOST}/#{index_name}
q
@complain_ids
c
Utils::index_exists?('complains')
n
Utils::index_exists?('complains')
q
@client
response = @client.perform
c
q
get "/complains"
c
q
BASE_URL
"#{BASE_URL}/#{@complain_ids[1]}"
      delete()
"#{BASE_URL}/#{@complain_ids[1]}"
q
@complain_ids[1]
c
@complain_ids[1]
delete("#{BASE_URL}/#{@complain_ids[1]}")
@complain_ids
q
last_response.status
delete("#{BASE_URL}/#{@complain_ids[1]}")
c
q
c
q
c
n
@new_complain_id
q
response.body
c
q
parsed
n
c
q
JSON.parse(result.body)["_source"]
new_complain_ok
parsed.except('id', 'created_at')
parsed = JSON.parse(result.body)["_source"]
result
n
 expect(parsed.except('id', 'created_at')).to match(new_complain_ok)
parsed
n
c
n
q
JSON.parse(result.body)
result.body
result
JSON.parse(result.body)["results"][0]
result
parsed = JSON.parse(result)["results"][0]
n
c
q
p parsed
n
q
JSON.parse(result.body)
JSON.parse(result.body)["results"][0]
result
result = Services::get_one_complaint(@complain_ids[1])
result
JSON.parse(last_response.body)["results"][0]
Services::get_one_complaint(@complain_ids[1])
q
last_response.status
@created_complain_id
Services::get_one_complaint(@created_complain_id)
n
c
n
q
@created_complain_id
Services::get_one_complaint(@created_complain_id)
c
q
@request_payload["description"]
@request_payload
@request_payload['description']
params["id"]
Services::update_complaint
q
c
q
last_response.status
c
q
c
q
c
n
@client.perform
n
pp body
n
location
title
description
q
e
n
c
"#{BASE_URL}/#{@complain_ids[1]}"
c
q
p create_body(description, title, location)
pp body
n
q
e
n
c
q
"#{BASE_URL}/#{@complain_ids[1]}"
@complain_ids[1]
q
updated_complain
last_response.status
n
q
last_response.status
n
q
expect(last_response.status).to eq(200)
n
q
result
c
q
Y
Q
Y
Q
Y
Q
c
q
response["results"].map {|r| r["created_at"]}
q
response["results"].map {|r| r["id"]}
c
response["results"].map {|r| r["created_at"]}
response["results"].map {|r| r["created_at]}
response["results"].map {|r| r[}
response["results"].map {|r| r}
response
response.
response.map(&:created_at)
result.class
results.class
results.map{|r| r["created_at"]}
results.map{|r| r["created_at"}
results.map("created_at")
results.map(&:created_at)
pp response
paginated[0]
q
parsed["results"][1]
new_complains[0]
parsed["results"][0].except('id', 'created_at')
q
JSON.parse(last_response.body)
c
q
puts @body.to_json
c
q
puts body.to_json
p body.to_json
Dp body.to_json
last_response
last_response.body
parsed = JSON.parse(last_response.body)
pp 
q
response
q
response
q
pp response
q
c
q
pp response
response[0]
response
q
response
q
response = JSON.parse(last_response.body)
post("#{BASE_URL}", body.to_json, { 'CONTENT_TYPE' => 'application/json' })
 body
response
q
pp response
pp repsonse
response = JSON.parse(last_response.body)
post("#{BASE_URL}", body.to_json, { 'CONTENT_TYPE' => 'application/json' })
response
q
c
n
p Utils::format_elastic_response(response.read_body)
n
response = http.request(request)
puts @body.to_json
@body
c
q
@body
@body.to_json
puts @body
q
response
q
c
q
@complain_ids
c
q
@complain_ids
puts @body.to_json
c
q
post("#{BASE_URL}", body.to_json, { 'CONTENT_TYPE' => 'application/json' })
c
n
pp body[:query][:bool][:filter]
n
pp body
n
geo_distance_config(*geodistance_args)
geodistance_args
c
q
geo_distance_config(*geodistance_args)
body[:query][:bool][:filter]
